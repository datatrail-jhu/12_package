.libPaths()
.libPaths()
library(googlesheets)
?gs_auth
?devtools::setup
iris
type(iris$Sepal.Length)
class(iris$Sepal.Length)
class(iris)
women
check_na(women)
library(ggplot2)
check_na <- function(variable){
# calculate number of observations
obs <- length(variable)
# calculate number of missing observations
nas <- sum(is.na(variable))
# nonmissing = total = missing
non_na <- obs - nas
# return summary
out <- cbind(obs, nas, non_na)
colnames(out) <- c("N", "NAs", "Non-NAs")
return(out)
}
check_na(msleep$name)
check_na(msleep$sleep_total)
View(msleep)
check_na(msleep$sleep_rem)
View(diamonds)
library(skimr)
skim(diamonds)
discoveries
faithful
View(faithful)
View(LifeCycleSavings)
View(Orange)
skim(Orange)
skim(sunspot.year)
skim(trees)
skim(uspop)
skim(warpbreaks)
skim(HairEyeColor)
skim(eurodist)
skim(ChickWeight)
iris
View(iris)
check_na(msleep$sleep_rem)
library(ggplot2)
check_na(msleep$sleep_rem)
?base_family
?theme_gray
?theme_classic
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
strip.background=ggplot2::element_rect(fill="gray90", color="black"),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram + theme_cbds()
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds()
ggplot(iris, aes(Sepal.Width))
ggplot(iris, aes(Sepal.Width)) + geom_histogram
ggplot(iris, aes(Sepal.Width)) + geom_histogram()
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds()
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "Ahrial")
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "sans")
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family) ,
# ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
#                panel.border=ggplot2::element_rect(fill=NA, color="black"),
#                strip.background=ggplot2::element_rect(fill="gray90", color="black"),
#                ...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family, ...) ,
# ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
#                panel.border=ggplot2::element_rect(fill=NA, color="black"),
#                strip.background=ggplot2::element_rect(fill="gray90", color="black"),
#                ...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family) ,
# ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
#                panel.border=ggplot2::element_rect(fill=NA, color="black"),
#                strip.background=ggplot2::element_rect(fill="gray90", color="black"),
#                ...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family, ...) ,
# ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
#                panel.border=ggplot2::element_rect(fill=NA, color="black"),
#                strip.background=ggplot2::element_rect(fill="gray90", color="black"),
#                ...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
```r
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_gray(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
panel.grid = ggplot2::element_blank()
# strip.background=element_blank(),
...)
)
}
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
axis.line = ggplot2::element_segment(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::element_rect(fill=NA, color="black"),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
axis.line = ggplot2::theme_segment(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
panel.border=ggplot2::panel.border=theme_blank(),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
```r
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"),
panel.border = ggplot2::theme_blank(),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"),
panel.border = theme_blank(),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"),
panel.border = ggplot2::theme.rect(colour=NA),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
axis.line = element_line(colour = "black"),
#   panel.border=ggplot2::element_rect(fill=NA, color="black"),
panel.grid = ggplot2::element_blank(),
# strip.background=element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family) ,
ggplot2::theme(#axis.ticks.length=grid::unit(0, "cm"),
axis.line = element_line(colour = "black"),
panel.grid = ggplot2::element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_minimal(base_size = base_size, base_family = base_family),
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
axis.line = element_line(colour = "black"),
#panel.grid = ggplot2::element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
ggplot2::theme_classic(base_size = base_size, base_family = base_family),
ggplot2::theme(axis.ticks.length=grid::unit(0, "cm"),
#axis.line = element_line(colour = "black"),
#panel.grid = ggplot2::element_blank(),
...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
theme_cbds <- function(base_size = 12, base_family = "", ...)
{
ggplot2::"%+replace%"(
# change to theme_classic
ggplot2::theme_classic(base_size = base_size, base_family = base_family),
# move axis ticks closer to axes
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"), ...)
)
}
ggplot(iris, aes(Sepal.Width)) + geom_histogram() + theme_cbds(base_family = "mono")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_cbds()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_cbds(base_size = 16, base_family = "serif")
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_cbds(base_size = 18, base_family = "serif")
?test_that
library(testthat)
?test_that
test_string <- "I love CBDS!"
# passes silently
expect_equal(test_string, "love")
expect_match(test_string, "love")
expect_match(test_string, "LOVE")
expect_error(1, "cbds")
expect_error(1/"cbds")
expect_error(1/"a")
expect_error(1/0)
1/0
log(0)
1/"cbds"
expect_error(1/"cbds", "non-numeric argument")
expect_error(1/"cbds", "NaNs produced")
class("cbds")
expect_is("cbds", "character)
expect_is("cbds", "character")
class(4)
expect_is("cbds", "numeric")
expect_true(sqrt(2) ^ 2 == 2)
expect_false(2 != 2)
2 != 2
2 == 2
check_na(iris$Sepal.Length)
obs <- c(3, 4, "str", 10, NA, NA, NA)
tested = check_na(obs)
tested
tested[1,2]
tested$NAs
tested[,"NAs"]
tested[,"NAs"] == 3
test
tested
test_that("calculations correct", {
obs <- c(3, 4, "str", 10, NA, NA, NA)
tested = check_na(obs)
expect_equal(tested[,"N"], 7)
expect_equal(tested[,"NAs"], 3)
expect_equal(tested[,"Non-NAs"], 4)
})
obs <- c(3, 4, "str", 10, NA, NA, NA)
tested = check_na(obs)
test_that("calculations correct", {
expect_equal(tested[,"N"], 7)
expect_equal(tested[,"NAs"], 3)
expect_equal(tested[,"Non-NAs"], 4)
})
tested[, "N"]
tested[, "N"] == 7
expect_equal(tested[1,"N"], 7)
tested[1,"N"]
as.numeric(tested[1,"N"])
test_that("calculations correct", {
obs <- c(3, 4, "str", 10, NA, NA, NA)
tested = check_na(obs)
expect_equal(as.numeric(tested[1,"N"]), 7)
expect_equal(as.numeric(tested[1,"NAs"]), 3)
expect_equal(as.numeric(tested[1,"Non-NAs"]), 4)
})
class(tested)
expect_is(tested, "matrix")
dim(tested)
expect_equal(dim(tested), c(1,3))
test_that("NA output format", {
#obs <- c(3, 4, "str", 10, NA, NA, NA)
#tested = check_na(obs)
expect_is(tested, "matrix")
expect_equal(dim(tested), c(1,3))
})
g <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_cbds()
attributes(g)
g$theme
class(g)
expect_is(g, "gg")
expect_is(g, "ggplot")
g$theme$axis.line.y
g$theme$axis.ticks.length
expect_equal(g$theme$axis.ticks.length, "0cm")
expect_match(g$theme$axis.ticks.length, "0cm")
g$theme$axis.ticks.length
expect_identical(g$theme$axis.ticks.length, "0cm")
class(g$theme$axis.ticks.length)
expect_equal(as.character(g$theme$axis.ticks.length), "0cm")
g$theme$panel.grid
g$theme$panel.grid.major
grep("element_blank",g$theme$panel.grid.major)
grepl("element_blank",g$theme$panel.grid.major)
as.character(g$theme$panel.grid.major)
as.character(g$theme$panel.grid.major[[1]])
as.character(g$theme$panel.grid.major)
class(g$theme$panel.grid.major)
expect_match(g$theme$panel.grid.major, "element_blank")
expect_match(class(g$theme$panel.grid.major), "element_blank")
expect_is(g$theme$panel.grid.major, "element_blank")
g$theme$panel.background
g$theme$panel.background$fill
expect_equal(g$theme$panel.background$fill, "white")
g$theme$axis.line.y
g$theme$axis.line
?theme_classic
theme_classic
g$theme$axis.line
g$theme$axis.line$colour
test_that("plot theme defaults", {
expect_equal(as.character(g$theme$axis.ticks.length), "0cm")
expect_is(g$theme$panel.grid.major, "element_blank")
expect_equal(g$theme$panel.background$fill, "white")
expect_equal(g$theme$axis.line$colour, "black")
})
p <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
test_that("plot theme defaults", {
expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
expect_is(p$theme$panel.grid.major, "element_blank")
expect_equal(p$theme$panel.background$fill, "white")
expect_equal(p$theme$axis.line$colour, "black")
})
test_that("plot theme defaults", {
#expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
expect_is(p$theme$panel.grid.major, "element_blank")
expect_equal(p$theme$panel.background$fill, "white")
expect_equal(p$theme$axis.line$colour, "black")
})
#expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
#expect_is(p$theme$panel.grid.major, "element_blank")
expect_equal(p$theme$panel.background$fill, "white")
#expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
#expect_is(p$theme$panel.grid.major, "element_blank")
#expect_equal(p$theme$panel.background$fill, "white")
expect_equal(p$theme$axis.line$colour, "black")
#expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
expect_is(p$theme$panel.grid.major, "element_blank")
#expect_equal(as.character(p$theme$axis.ticks.length), "0cm")
#expect_is(p$theme$panel.grid.major, "element_blank")
expect_equal(p$theme$panel.background$fill, "white")
g$theme
g$theme$text
g$theme$text$family
expect_equal(p2$theme$text$size, 18)
p2 <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point() +
theme_cbds(base_size = 18, base_family = "serif")
test_that("plot theme defaults", {
expect_equal(p2$theme$text$family, "serif")
expect_equal(p2$theme$text$size, 18)
})
p2$theme$text$size
?testthat:use_test
?testthat::use_test
my_value <- 6
expect_equal(my_value, 6)
expect_match(my_value, 6)
expect_identical(my_value, 6)
expect_message(my_value, 6)
expect_is(my_value, 6)
`expect_match(my_string, "learning")`
my_string <- 'learning is the best'
expect_match(my_string, "learning")
expect_match(my_string, learning)
expect_match(my_string, "learning is the best!")
expect_match(my_string, "Best")
?ggplot2
library(ggplot2)
?ggplot2
library(forcats)
?forcats
library(forcats)
?forcats
library(ggplot2)
?ggplot2
?ggplot2
**Suggests**
### Summary
library(dplyr)
?dplyr
?ggplot
?ggplot
?summarise
?@export
emphasize_text <- function(text, emphasis = "!!!"){
out = toupper(text)
out = paste0(out, emphasis)
print(out)
}
